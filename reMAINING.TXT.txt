PAYMENT GATWAY ROZERPAY TO PAYPAL                    
IMAGE UPLODE AND RECIVE REAL TIME                    
LANGITUDE LONGITUDE BASED ORDER DISTRIBUTION.
register as mobile number and as a admin or as a user add roal in schema 
NOTIFICATION IN APPLICATION integrate api service
DATA HANDLING USING ELASTIC SEARCH
SPLIT ORDER
search based on medicine and can also by medical store

integrate porter api at launch time
DISCUSS WITH THEM 
# ‚úÖ Project Requirements Summary

---

### 1. üí≥ Payment Gateway Integration
- Replace **PayPal** with **Razorpay** as the primary payment gateway.
- Ensure Razorpay supports:
  - Secure transactions.
  - User-friendly payment UI.
  - Order confirmation and failure handling.
  - Webhooks for real-time payment status updates.

---

### 2. üñºÔ∏è Image Upload and Real-Time Display
- Implement **image upload** functionality (e.g., prescriptions).
- Store uploaded images securely (e.g., local server or cloud like Cloudinary).
- Enable **real-time retrieval and display** of uploaded images using **Socket.IO** or polling (admin view, order confirmation, etc.).

---

### 3. üìç Location-Based Order Distribution
- Use **latitude and longitude (geo-coordinates)** to:
  - Assign orders to the **nearest** medical store or delivery partner.
  - Ensure accurate delivery zone coverage.
  - Support distance-based filtering and sorting.

---

### 4. üßæ User Registration and Role Management
- Register users using **mobile number authentication**.
- Add a `role` field in the user schema to differentiate:
  - **Admin**: Can manage orders, products, stores, and images.
  - **User**: Can browse and place orders.
- Enforce role-based UI and API access.

---

### 5. üîî In-App Notifications
- Integrate a notification service/API to send:
  - Order updates (placed, accepted, out for delivery, delivered).
  - Prescription approval or rejection.
  - Payment confirmations.
- Support:
  - **Push notifications** (mobile app).
  - **In-app toast notifications** (web & mobile).

---

### 6. üìÇ Data Handling via Elasticsearch
- Use **Elasticsearch** to:
  - Enable fast and full-text search across medicines and stores.
  - Store structured logs of:
    - User orders
    - Chat history (if needed)
    - Medicine catalog
  - Support filtering, keyword search, and sorting for UI/UX.

---

### 7. ‚úÇÔ∏è Order Splitting
- Implement order split logic when:
  - A single store cannot fulfill the complete order.
  - Items must be fetched from multiple vendors.
- Show **split order tracking** in:
  - User view (multiple tracking entries).
  - Admin dashboard (per-vendor order fulfillment).

---

### 8. üîç Search Functionality
- Allow users to:
  - Search medicines by **name**, **category**, or **salt**.
  - Filter search by **store availability**, **location proximity**, or **ratings**.
- Use **Elasticsearch** as the backend for all search-related operations.

---

### 9. üöö Porter API Integration
- Integrate **Porter API** at launch for real-time delivery logistics.
- Features:
  - Auto-assign delivery partners to accepted orders.
  - Live order tracking on user UI.
  - Estimated time of arrival (ETA).
  - Display delivery agent details (name, number, etc.).

---

### 10. ü§ù Discussion Points
- Coordinate with **Porter team** and relevant 3rd-party providers for:
  - API onboarding.
  - Pricing & billing structure.
  - SLA guarantees and delivery zones.

---

### 11. üìû Pharmacist Call Functionality
- Allow **pharmacists to initiate calls** to users (for:
  - Prescription clarification
  - Delivery coordination
- Use:
  - Phone call API (e.g., Twilio, CallHippo, or device native dialer support)
  - Display call button in admin/pharmacy dashboard next to orders.

---

### 12. üìã Order Confirmation in UI
- After successful order placement:
  - Show a **confirmation screen** with summary (products, prescription, price, delivery address).
  - Show confirmation on both **web and mobile platforms**.
  - Option to **download invoice** or **view in order history**.

---

### 13. üõ∞Ô∏è Real-Time Order Tracking (User Side)
- Users can track order status in real-time from:
  - Order placed ‚Üí Accepted ‚Üí Out for delivery ‚Üí Delivered
- Powered by:
  - **Socket.IO events**
  - Porter live tracking integration
- Show progress bar or stepper component in order details view.

---
